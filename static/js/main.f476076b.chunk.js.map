{"version":3,"sources":["components/SupportComponents/LoadingModal/LoadingModal.tsx","components/SupportComponents/ChartHorizontalLine/ChartHorizontalLine.tsx","components/CV/CV.tsx","redux/Global/globalReducer.tsx","redux/store.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoadingModal","style","position","display","backgroundColor","width","height","margin","color","icon","faCog","size","spin","ChartHorizontalLine","data","nameColor","chartBorderColor","chartColor","className","map","d","name","border","percent","connect","state","global","dispatch","props","useState","textContent","setTextContent","useEffect","axios","get","process","then","a","res","console","log","languageSetting","eng","hun","src","alt","aboutMe","title","content","p","i","workExperience","inJobExperience","exp","firstHandExperience","cursor","href","link","target","technologySkills","skills","initialState","rootReducer","combineReducers","action","type","store","createStore","applyMiddleware","thunk","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f476076b.chunk.js","sourcesContent":["import { faCog } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { CSSProperties } from \"react\";\r\n\r\nexport const LoadingModal = () => {\r\n\r\nconst style: CSSProperties = {\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    backgroundColor: 'rgba(255, 255, 255, .6)',\r\n    width: '100%',\r\n    height: '100%',\r\n}\r\n\r\n  return (\r\n    <div style={style}>\r\n      <FontAwesomeIcon style={{margin:'auto', color:'#44546A'}} icon={faCog} size={'6x'} spin={true}/>\r\n    </div>\r\n  );\r\n};\r\n","import \"./ChartHorizontalLine.scss\";\r\n\r\ntype ChartHorizontalLineProps = {\r\n  data: [\r\n    {\r\n      name: string;\r\n      percent: string;\r\n    }\r\n  ];\r\n  nameColor?: string;\r\n  chartColor?: string;\r\n  chartBorderColor?: string;\r\n};\r\n\r\nconst ChartHorizontalLine = ({\r\n  data,\r\n  nameColor = \"#44546a\",\r\n  chartBorderColor = \"#44546a\",\r\n  chartColor = \"#44546a\",\r\n}: ChartHorizontalLineProps) => {\r\n  return (\r\n    <div className=\"chart-horizontal-line\">\r\n      {data.map((d: any) => {\r\n        return (\r\n          <div className=\"current-line\">\r\n            <span style={{ color: nameColor }}>\r\n              {d.name}\r\n            </span>\r\n            <div\r\n              style={{border: `2px solid ${chartBorderColor}`}}\r\n              className=\"char-line-bg\"\r\n            >\r\n              <div\r\n                style={{\r\n                  width: `${d.percent}%`,\r\n                  backgroundColor: chartColor\r\n                }}\r\n                className=\"char-line-value\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartHorizontalLine;\r\n","import axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./CV.scss\";\r\nimport { LoadingModal } from \"../SupportComponents/LoadingModal/LoadingModal\";\r\nimport ChartHorizontalLine from \"../SupportComponents/ChartHorizontalLine/ChartHorizontalLine\";\r\n\r\nconst CV = (props: any) => {\r\n  const [textContent, setTextContent] = useState<any>(null);\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${process.env.PUBLIC_URL}/cv/cv_text_content.json`)\r\n      .then(async (res) => {\r\n        console.log(res.data)\r\n        await setTextContent(\r\n          props.global.languageSetting === \"eng\" ? res.data.eng : res.data.hun\r\n        );\r\n      });\r\n  }, [props.global.languageSetting]);\r\n  return (\r\n    <div className=\"cv-container\">\r\n      {textContent ? (\r\n        <>\r\n          <div className={\"personal-informations\"}>\r\n            <div className=\"me-picture-holder\">\r\n              <img\r\n                src={`${process.env.PUBLIC_URL}/cv/me.png`}\r\n                alt={\r\n                  props.global.languageSetting === \"eng\"\r\n                    ? \"A picture of Martin Bacsur\"\r\n                    : \"Egy kép Bacsur Martin-ról\"\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"arrow-decoration\"></div>\r\n            <div className=\"about-me\">\r\n              <h3>{textContent.aboutMe.title}</h3>\r\n              {textContent.aboutMe.content.map((p: string, i: number) => {\r\n                return <p key={i}>{p}</p>;\r\n              })}\r\n            </div>\r\n            <div className=\"skills\"></div>\r\n          </div>\r\n          <div className=\"main-informations\">\r\n            <div className=\"header\">\r\n              <h1>bacsur martin</h1>\r\n              <h4>{textContent.title}</h4>\r\n            </div>\r\n            <div className=\"work-experience\">\r\n              <h3 className=\"cv-content-title\">\r\n                {textContent.workExperience.inJobExperience.title}\r\n              </h3>\r\n              {textContent.workExperience.inJobExperience.content.map(\r\n                (exp: string, i: number) => {\r\n                  return (\r\n                    <span key={i} className={i % 2 === 0 ? \"company\" : \"job\"}>\r\n                      {exp}\r\n                    </span>\r\n                  );\r\n                }\r\n              )}\r\n\r\n              <span\r\n                className=\"company\"\r\n                style={{ margin: \".1rem auto .1rem 4rem\" }}\r\n              >\r\n                {textContent.workExperience.firstHandExperience.title}\r\n              </span>\r\n              {textContent.workExperience.firstHandExperience.content.map(\r\n                (exp: any, i: number) => {\r\n                  return (\r\n                    <a\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"firsthand-job\"\r\n                      key={i}\r\n                      href={`${exp.link}`}\r\n                      target=\"_blank\"\r\n                    >\r\n                      {exp.title}\r\n                    </a>\r\n                  );\r\n                }\r\n              )}\r\n            </div>\r\n            <div className=\"technology-skills\">\r\n              <h3 className=\"cv-content-title\">\r\n                {textContent.technologySkills}\r\n              </h3>\r\n              <div className=\"front-end\">\r\n                <h3 className=\"development-side\">front-end</h3>\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/cv/frontend/js.png`}\r\n                  alt=\"Javascript\"\r\n                />\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/cv/frontend/typescript.png`}\r\n                  alt=\"Typescript\"\r\n                />\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/cv/frontend/react.png`}\r\n                  alt=\"ReactJs\"\r\n                />\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/cv/frontend/jquery.png`}\r\n                  alt=\"jQuery\"\r\n                />\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/cv/frontend/Sass.svg`}\r\n                  alt=\"Sass Script\"\r\n                />\r\n              </div>\r\n              <div className=\"back-end\">\r\n                <h3 className=\"development-side\">back-end</h3>\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/cv/backend/node.png`}\r\n                  alt=\"Node\"\r\n                />\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/cv/backend/netCore.png`}\r\n                  alt=\"dotNetCore\"\r\n                />\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/cv/backend/mysql.png`}\r\n                  alt=\"mySql\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"skills\">\r\n              <h3 className=\"cv-content-title\">\r\n                {textContent.skills.title}\r\n              </h3>\r\n              <ChartHorizontalLine data={textContent.skills.content}></ChartHorizontalLine>\r\n            </div>\r\n\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <LoadingModal />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    global: state.global,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CV);\r\n","import { GET_LANGUAGE_SETTING, globalReducerActionType } from \"./globalTypes\";\r\n\r\nconst initialState = {\r\n  languageSetting: \"hun\",\r\n}\r\n\r\nexport const globalReducer = (state : any = initialState, action: globalReducerActionType) => {\r\n  switch (action.type) {\r\n   \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { globalReducer } from \"./Global/globalReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    global: globalReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));","import \"./App.scss\";\nimport CV from \"./components/CV/CV\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <CV></CV>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}